/**
 * Debug helper para testar as corre√ß√µes do sistema de skills
 * Execute no console: debugSkillSystem.testAllFixes()
 */

import { skillBasesManager } from './skillBases.js';
import { skillModulesManager } from './skillModules.js';
import SkillCreator from './skillCreator.js';

export const debugSkillSystem = {
  // Teste 1: Verificar se [Any Other Offensive] funciona
  testAnyOtherOffensive() {
    console.log('üîß TESTE 1: Configure [Any Other Offensive]');
    
    const testChar = { stats: { intellect: 3 }, skills: [], spareModules: { rank1: 3, rank2: 1, rank3: 0 } };
    const skillCreator = new SkillCreator(testChar);
    
    // Iniciar cria√ß√£o e selecionar base que tem [Any Other Offensive]
    skillCreator.startSkillCreation();
    const baseResult = skillCreator.selectBase('dual_strike');
    
    if (baseResult.success) {
      console.log('‚úÖ Base selecionada: dual_strike');
      console.log('üìã Dados da skill:', skillCreator.currentSkill.dice);
      
      // Encontrar dado com [Any Other Offensive]
      const anyOtherDie = skillCreator.currentSkill.dice.find(d => d.originalTag === '[Any Other Offensive]');
      
      if (anyOtherDie) {
        console.log('‚úÖ Encontrou dado [Any Other Offensive]:', anyOtherDie);
        
        // Tentar configurar
        const configResult = skillCreator.configureDieType(anyOtherDie.id, 'Pierce');
        
        if (configResult.success) {
          console.log('‚úÖ Configura√ß√£o bem-sucedida! Tag atualizada para:', anyOtherDie.tag);
        } else {
          console.log('‚ùå Falha na configura√ß√£o:', configResult.error);
        }
      } else {
        console.log('‚ùå N√£o encontrou dado [Any Other Offensive]');
      }
    } else {
      console.log('‚ùå Falha ao selecionar base:', baseResult.error);
    }
  },

  // Teste 2: Verificar m√≥dulos target die
  testTargetDieModules() {
    console.log('\nüîß TESTE 2: Target Die Modules');
    
    const testChar = { stats: { intellect: 3 }, skills: [], spareModules: { rank1: 3, rank2: 1, rank3: 0 } };
    const skillCreator = new SkillCreator(testChar);
    
    // Criar skill com base triple threat
    skillCreator.startSkillCreation();
    const baseResult = skillCreator.selectBase('triple_threat');
    
    if (baseResult.success) {
      // Configurar dados
      skillCreator.configureDieType('die_0', 'Slash');
      skillCreator.configureDieType('die_2', 'Slash');
      
      console.log('‚úÖ Base configurada');
      console.log('üìã Dados configurados:', skillCreator.currentSkill.dice.map(d => ({ id: d.id, tag: d.tag, type: d.type })));
      
      // Testar m√≥dulo que requer target die
      const bleedModule = skillModulesManager.getModuleById('bleed', 1);
      console.log('üîç M√≥dulo bleed:', bleedModule);
      
      // Verificar dados dispon√≠veis
      const availableDice = skillCreator.getAvailableTargetDice(bleedModule);
      console.log('üéØ Dados dispon√≠veis para target:', availableDice.map(d => ({ id: d.id, tag: d.tag, type: d.type })));
      
      if (availableDice.length > 0) {
        console.log('‚úÖ Dados dispon√≠veis encontrados');
        
        // Tentar adicionar m√≥dulo com auto-sele√ß√£o
        const addResult = skillCreator.addModule('bleed', 1, null, true);
        
        if (addResult.success) {
          console.log('‚úÖ M√≥dulo adicionado com sucesso!');
          console.log('üìã M√≥dulos da skill:', skillCreator.currentSkill.modules);
        } else if (addResult.requiresTargetSelection) {
          console.log('‚ÑπÔ∏è Requer sele√ß√£o de target (m√∫ltiplos dados dispon√≠veis)');
          console.log('üéØ Dados dispon√≠veis:', addResult.availableDice);
          
          // Selecionar primeiro dado manualmente
          const firstDie = addResult.availableDice[0];
          const retryResult = skillCreator.addModule('bleed', 1, firstDie.id, true);
          
          if (retryResult.success) {
            console.log('‚úÖ M√≥dulo adicionado com target espec√≠fico!');
          } else {
            console.log('‚ùå Falha mesmo com target espec√≠fico:', retryResult.error);
          }
        } else {
          console.log('‚ùå Falha ao adicionar m√≥dulo:', addResult.error);
        }
      } else {
        console.log('‚ùå Nenhum dado dispon√≠vel para target');
      }
    } else {
      console.log('‚ùå Falha ao selecionar base:', baseResult.error);
    }
  },

  // Teste 3: Verificar unique skills
  testUniqueSkills() {
    console.log('\nüîß TESTE 3: Unique Skills');
    
    const uniqueSkills = skillBasesManager.getUniqueSkills();
    console.log(`‚úÖ Unique skills encontradas: ${uniqueSkills.length}`);
    
    uniqueSkills.forEach(skill => {
      console.log(`- ${skill.name} (Cost: ${skill.cost})`);
      console.log(`  M√≥dulos: ${skill.modules?.length || 0}`);
      console.log(`  √â unique: ${skill.isUnique}`);
    });
  },

  // Teste 4: Verificar finaliza√ß√£o preserva targetDieId
  testFinalizationPreservesTargetDie() {
    console.log('\nüîß TESTE 4: Finaliza√ß√£o preserva targetDieId');
    
    const testChar = { stats: { intellect: 3 }, skills: [], spareModules: { rank1: 3, rank2: 1, rank3: 0 } };
    const skillCreator = new SkillCreator(testChar);
    
    // Criar skill
    skillCreator.startSkillCreation();
    skillCreator.selectBase('triple_threat');
    skillCreator.configureDieType('die_0', 'Slash');
    skillCreator.configureDieType('die_2', 'Slash');
    
    // Adicionar m√≥dulos com target
    skillCreator.addModule('stronger', 1, 'die_0', true);
    skillCreator.addModule('bleed', 1, 'die_2', true);
    
    console.log('üìã M√≥dulos antes da finaliza√ß√£o:');
    skillCreator.currentSkill.modules.forEach(m => {
      console.log(`- ${m.name}: targetDieId=${m.targetDieId}`);
    });
    
    // Finalizar
    const finalResult = skillCreator.finalizeSkill('Test Skill');
    
    if (finalResult.success) {
      console.log('‚úÖ Skill finalizada com sucesso');
      console.log('üìã M√≥dulos ap√≥s finaliza√ß√£o:');
      finalResult.skill.modules.forEach(m => {
        console.log(`- ${m.name}: targetDieId=${m.targetDieId}, targetDie=${m.targetDie}`);
      });
    } else {
      console.log('‚ùå Falha na finaliza√ß√£o:', finalResult.error);
    }
  },

  // Executar todos os testes
  testAllFixes() {
    console.log('üöÄ INICIANDO TESTES DO SISTEMA DE SKILLS\n');
    
    this.testAnyOtherOffensive();
    this.testTargetDieModules();
    this.testUniqueSkills();
    this.testFinalizationPreservesTargetDie();
    
    console.log('\n‚úÖ TESTES CONCLU√çDOS!');
    console.log('\nüìã RESUMO DAS CORRE√á√ïES:');
    console.log('1. ‚úÖ [Any Other Offensive] agora funciona na configura√ß√£o');
    console.log('2. ‚úÖ Target die modules detectam dados dispon√≠veis corretamente');
    console.log('3. ‚úÖ Unique skills est√£o implementadas');
    console.log('4. ‚úÖ Finaliza√ß√£o preserva informa√ß√£o de targetDieId');
  }
};

// Disponibilizar globalmente para debug
if (typeof window !== 'undefined') {
  window.debugSkillSystem = debugSkillSystem;
}

export default debugSkillSystem;
